# vim:ft=sh
set -e # exit if any error

PID=${RAILS_ROOT}/tmp/pids/unicorn.pid
OLD_PID=${RAILS_ROOT}/tmp/pids/unicorn.oldbin

CMD="bundle exec unicorn -D -c ${RAILS_ROOT}/config/unicorn.rb -E $RAILS_ENV"
TIMEOUT=${TIMEOUT-60}

function endnow {
  echo "$1" && exit 1
}

function sig {
  test -s "$PID"     && \
  kill -$1 `cat $PID` 2>/dev/null
}

function oldsig {
  test -s "$OLD_PID" && \
  kill -$1 `cat $OLD_PID` 2>/dev/null
}

function check_dependencies {
  [ -d $RAILS_ROOT ] && cd     $RAILS_ROOT || endnow "\$DIR: ${RAILS_ROOT}/current does not exist."
}

function start_unicorn {
  sig 0 && echo >&2 "unicorn: Already running" && exit 0
  $CMD
}

function stop_unicorn {
  sig QUIT && exit 0
  echo >&2 "unicorn: Not running"
}

function force_stop_unicorn {
  sig TERM && exit 0
  echo >&2 "unicorn: Not running"
}

function reload_unicorn {
  sig HUP && echo "unicorn: reloaded OK" && exit 0
  echo >&2 "unicorn: Couldn't reload, starting '[$CMD]' instead"
  $CMD
}

function status_unicorn {
  sig 0 && echo >&2 "unicorn: is running [`cat $PID`]" && exit 0
  echo >&2 "unicorn: Not running"
}

function status_unicorn_old {
  oldsig 0 && echo >&2 "unicorn (old): is running [`cat ${OLD_PID}`]" && exit 0
  echo >&2 "unicorn (old): Not running"
}

function rotate_unicorn {
  sig USR1 && echo "Rotated logs OK" && exit 0
  echo >&2 "Couldn't rotate logs"  && exit 1
}

function upgrade_unicorn {
  if sig USR2 && sleep 20 && sig 0 && oldsig QUIT
  then

    ###
    # wait for $OLD_PID to die
    ###
    n=$TIMEOUT
    while test -s $OLD_PID && test $n -ge 0
    do
        echo >&2 "Waiting for old master to die... ($n)" && sleep 2 && n=$(( $n - 1 ))
    done ; echo

    ###
    # not dead: leave it
    ###
    if test $n -lt 0 && test -s $OLD_PID
    then
      echo >&2 "unicorn (old) $OLD_PID still exists after $TIMEOUT seconds"
      exit 1
    fi
    exit 0

  fi

  ###
  # Unicorn was stopped ?
  ###
  echo >&2 "unicorn: Could not upgrade, starting '$CMD' instead"
  $CMD
}

